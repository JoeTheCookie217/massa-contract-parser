{"mappings":"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","sources":["src/index.ts","src/getProbableInterfaces.ts","src/interfaces.ts","src/JsonType.ts","src/methods.ts","src/parseWasm.ts","src/parseContract.ts","src/ParsedContract.ts"],"sourcesContent":["export * from './getProbableInterfaces';\nexport * from './interfaces';\nexport * from './JsonType';\nexport * from './methods';\nexport * from './parseContract';\nexport * from './ParsedContract';\nexport * from './parseWasm';\n","import { StandardInterfaceId, interfaces } from './interfaces';\n\n/**\n * Guesses which standards a contract _probably_ implements based on exported\n * method names.\n *\n * @param methodNames Exported method names\n * @returns Interfaces the contract probably implements, as well as which\n *  methods likely constitute which interfaces\n */\nexport function getProbableInterfaces(methodNames: string[]): {\n  probableInterfaces: StandardInterfaceId[];\n  byMethod: Record<string, StandardInterfaceId[]>;\n} {\n  const probableInterfaces = Object.keys(interfaces).filter(i =>\n    interfaces[i as StandardInterfaceId].methods.every(\n      m => methodNames.indexOf(m.name) !== -1,\n    ),\n  ) as StandardInterfaceId[];\n\n  const byMethod: Record<string, StandardInterfaceId[]> = {};\n  methodNames.forEach(methodName => {\n    byMethod[methodName] = probableInterfaces.filter(\n      i => interfaces[i].methods.map(m => m.name).indexOf(methodName) !== -1,\n    );\n  });\n\n  return { probableInterfaces, byMethod };\n}\n","import { JsonType } from './JsonType';\n\nexport enum StandardInterfaceId {\n  NEP141 = 'nep141',\n  NEP145 = 'nep145',\n  NEP148 = 'nep148',\n  NEP171 = 'nep171',\n  NEP177 = 'nep177',\n  NEP178 = 'nep178',\n  NEP199 = 'nep199',\n  NEP330 = 'nep330',\n}\n\n/**\n * Well-known smart contract interface specification\n */\nexport interface StandardInterface {\n  /** Unique interface ID */\n  id: StandardInterfaceId;\n  /** Human-readable interface name */\n  name: string;\n  /** Methods provided by interface */\n  methods: StandardInterfaceMethod[];\n}\n\nexport interface StandardInterfaceArgument {\n  name: string;\n  /**\n   * An argument can support one or multiple types\n   * (e.g. Rust's `Option<String>` becomes `['string', 'null']`)\n   */\n  type: JsonType | JsonType[];\n}\n\nexport interface StandardInterfaceMethod {\n  name: string;\n  args: StandardInterfaceArgument[];\n}\n\n/**\n * Mapping interface ID to interface specification\n */\nexport const interfaces: Readonly<\n  Record<StandardInterfaceId, StandardInterface>\n> = Object.freeze({\n  [StandardInterfaceId.NEP141]: {\n    id: StandardInterfaceId.NEP141,\n    name: 'FT Core (NEP-141)',\n    methods: [\n      {\n        name: 'ft_transfer',\n        args: [\n          { name: 'receiver_id', type: 'string' },\n          { name: 'amount', type: 'string' },\n          { name: 'memo', type: ['string', 'null'] },\n        ],\n      },\n      {\n        name: 'ft_transfer_call',\n        args: [\n          { name: 'receiver_id', type: 'string' },\n          { name: 'amount', type: 'string' },\n          { name: 'memo', type: ['string', 'null'] },\n          { name: 'msg', type: 'string' },\n        ],\n      },\n      {\n        name: 'ft_total_supply',\n        args: [],\n      },\n      {\n        name: 'ft_balance_of',\n        args: [{ name: 'account_id', type: 'string' }],\n      },\n    ],\n  },\n  [StandardInterfaceId.NEP145]: {\n    id: StandardInterfaceId.NEP145,\n    name: 'Storage Management (NEP-145)',\n    methods: [\n      {\n        name: 'storage_deposit',\n        args: [\n          { name: 'account_id', type: ['string', 'null'] },\n          { name: 'registration_only', type: ['boolean', 'null'] },\n        ],\n      },\n      {\n        name: 'storage_withdraw',\n        args: [{ name: 'amount', type: ['string', 'null'] }],\n      },\n      {\n        name: 'storage_unregister',\n        args: [{ name: 'force', type: ['boolean', 'null'] }],\n      },\n      {\n        name: 'storage_balance_bounds',\n        args: [],\n      },\n      {\n        name: 'storage_balance_of',\n        args: [{ name: 'account_id', type: 'string' }],\n      },\n    ],\n  },\n  [StandardInterfaceId.NEP148]: {\n    id: StandardInterfaceId.NEP148,\n    name: 'FT Metadata (NEP-148)',\n    methods: [\n      {\n        name: 'ft_metadata',\n        args: [],\n      },\n    ],\n  },\n  [StandardInterfaceId.NEP171]: {\n    id: StandardInterfaceId.NEP171,\n    name: 'NFT Core (NEP-171)',\n    methods: [\n      {\n        name: 'nft_transfer',\n        args: [\n          { name: 'receiver_id', type: 'string' },\n          { name: 'token_id', type: 'string' },\n          { name: 'approval_id', type: ['number', 'null'] },\n          { name: 'memo', type: ['string', 'null'] },\n        ],\n      },\n      {\n        name: 'nft_transfer_call',\n        args: [\n          { name: 'receiver_id', type: 'string' },\n          { name: 'token_id', type: 'string' },\n          { name: 'approval_id', type: ['number', 'null'] },\n          { name: 'memo', type: ['string', 'null'] },\n          { name: 'msg', type: 'string' },\n        ],\n      },\n      {\n        name: 'nft_token',\n        args: [{ name: 'token_id', type: 'string' }],\n      },\n    ],\n  },\n  [StandardInterfaceId.NEP177]: {\n    id: StandardInterfaceId.NEP177,\n    name: 'NFT Metadata (NEP-177)',\n    methods: [\n      {\n        name: 'nft_metadata',\n        args: [],\n      },\n    ],\n  },\n  [StandardInterfaceId.NEP178]: {\n    id: StandardInterfaceId.NEP178,\n    name: 'NFT Approval Management (NEP-178)',\n    methods: [\n      {\n        name: 'nft_approve',\n        args: [\n          { name: 'token_id', type: 'string' },\n          { name: 'account_id', type: 'string' },\n          { name: 'msg', type: ['string', 'null'] },\n        ],\n      },\n      {\n        name: 'nft_revoke',\n        args: [\n          { name: 'token_id', type: 'string' },\n          { name: 'account_id', type: 'string' },\n        ],\n      },\n      {\n        name: 'nft_revoke_all',\n        args: [{ name: 'token_id', type: 'string' }],\n      },\n      {\n        name: 'nft_is_approved',\n        args: [\n          { name: 'token_id', type: 'string' },\n          { name: 'approved_account_id', type: 'string' },\n          { name: 'approval_id', type: ['number', 'null'] },\n        ],\n      },\n    ],\n  },\n  [StandardInterfaceId.NEP199]: {\n    id: StandardInterfaceId.NEP199,\n    name: 'Royalties and Payouts (NEP-199)',\n    methods: [\n      {\n        name: 'nft_payout',\n        args: [\n          { name: 'token_id', type: 'string' },\n          { name: 'balance', type: 'string' },\n          { name: 'max_len_payout', type: 'number' },\n        ],\n      },\n      {\n        name: 'nft_transfer_payout',\n        args: [\n          { name: 'receiver_id', type: 'string' },\n          { name: 'token_id', type: 'string' },\n          { name: 'approval_id', type: 'number' },\n          { name: 'balance', type: 'string' },\n          { name: 'max_len_payout', type: 'number' },\n        ],\n      },\n    ],\n  },\n  [StandardInterfaceId.NEP330]: {\n    id: StandardInterfaceId.NEP330,\n    name: 'Source Metadata (NEP-330)',\n    methods: [\n      {\n        name: 'contract_source_metadata',\n        args: [],\n      },\n    ],\n  },\n});\n","/**\n * Data types supported by JSON format\n */\nexport type JsonType =\n  | 'string'\n  | 'number'\n  | 'object'\n  | 'array'\n  | 'boolean'\n  | 'null';\n","import { parseWasm } from './parseWasm';\n\n/**\n * Extracts exported functions from smart contract\n *\n * @param code_base64 Base64-encoded WASM binary (e.g. obtained from\n *  `near-api-js`)\n * @returns List of exported function names\n */\nexport function getMethodNames(code_base64: string): string[] {\n  const ast = parseWasm(code_base64);\n  return ast.body[0].fields\n    .filter(\n      (x: any) => x.type === 'ModuleExport' && x.descr.exportType === 'Func',\n    )\n    .map((x: any) => x.name) as string[];\n}\n","const { decode } = require('@webassemblyjs/wasm-parser');\n\n/**\n * Converts a base64-encoded string to a byte array. Works in browser and Node\n * environments.\n *\n * @param strb64 base64 string\n * @returns Decoded byte array\n */\nfunction base64StringToUint8Array(strb64: string): Uint8Array {\n  if (typeof Buffer !== 'undefined') {\n    // Node\n    return Buffer.from(strb64, 'base64');\n  } else {\n    // Browser\n    return new Uint8Array(\n      atob(strb64.toString().trim())\n        .split('')\n        .map(c => c.charCodeAt(0)),\n    );\n  }\n}\n\n/**\n * Parse base64-encoded WASM into AST\n *\n * @param wasmb64 base64-encoded WASM binary\n * @returns WASM abstract syntax tree\n */\nexport function parseWasm(wasmb64: string): any {\n  return decode(base64StringToUint8Array(wasmb64));\n}\n","import { getProbableInterfaces } from './getProbableInterfaces';\nimport { ParsedContract } from './ParsedContract';\nimport { getMethodNames } from './methods';\n\nexport function parseContract(code_base64: string): ParsedContract {\n  const methodNames = getMethodNames(code_base64);\n  const probableInterfaces = getProbableInterfaces(methodNames);\n  return {\n    methodNames,\n    ...probableInterfaces,\n  };\n}\n","import { StandardInterfaceId } from './interfaces';\n\nexport interface ParsedContract {\n  /**\n   * Standard interfaces the original contract is likely to support\n   */\n  probableInterfaces: StandardInterfaceId[];\n  /**\n   * Maps method names to the ID of the interface they are likey to constitute\n   */\n  byMethod: Record<string, StandardInterfaceId[]>;\n  /**\n   * Names of functions exported from the original contract\n   */\n  methodNames: string[];\n}\n"],"names":["StandardInterfaceId","interfaces","getProbableInterfaces","methodNames","probableInterfaces","byMethod","Record","Object","keys","filter","i","methods","every","m","indexOf","name","forEach","methodName","map","JsonType","NEP141","NEP145","NEP148","NEP171","NEP177","NEP178","NEP199","NEP330","StandardInterface","id","StandardInterfaceMethod","StandardInterfaceArgument","type","args","Readonly","freeze","parseWasm","getMethodNames","code_base64","ast","body","fields","x","descr","exportType","decode","require","base64StringToUint8Array","strb64","Uint8Array","Buffer","from","atob","toString","trim","split","c","charCodeAt","wasmb64","ParsedContract","parseContract"],"version":3,"file":"bundle.js.map"}